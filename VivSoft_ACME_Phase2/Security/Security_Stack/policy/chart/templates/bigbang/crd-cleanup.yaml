{{- if .Values.cleanupCRDs.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Chart.Name }}-crd-cleanup"
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  crd-cleanup.sh: |-
    #!/bin/bash
    set -e
    ENABLED_CONSTRAINTS="{{- range $k, $v := .Values.violations }} {{- if $v.enabled  }} {{ $v.kind }}/{{ $v.name }} {{- end }}{{- end }}"
    echo "Check for disabled or orphaned constraints"
    for constraint in $(kubectl get constraints -o jsonpath='{range .items[*]}{@.kind}{","}{@.metadata.name}{"\n"}{end}');
    do
      constraintKind=$(echo $constraint | cut -d "," -f 1)
      constraintName=$(echo $constraint | cut -d "," -f 2)
      if [[ ! $ENABLED_CONSTRAINTS == *"$constraintKind/$constraintName"* ]]; then
        kubectl delete "$constraintKind/$constraintName"
      fi
    done

---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Chart.Name }}-crd-cleanup"
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.image.pullSecrets | nindent 8 }}
      {{- end }}
      serviceAccountName: "{{ .Chart.Name }}-crd-cleanup"
      containers:
        - name: crd-delete
          image: '{{ .Values.image.crdRepository }}:{{ .Values.image.crdRelease }}'
          imagePullPolicy: '{{ .Values.image.pullPolicy }}'
          command: ['/bin/sh', '/src/crd-cleanup.sh']
          volumeMounts:
            - name: crd-cleanup
              mountPath: /src
            - mountPath: /.kube/cache
              name: gatekeeper-kube-cache
      restartPolicy: Never
      volumes:
        - name: crd-cleanup
          configMap:
            name: "{{ .Chart.Name }}-crd-cleanup"
        - emptyDir: {}
          name: gatekeeper-kube-cache

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "{{ .Chart.Name }}-crd-cleanup"
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  namespace:  {{ .Release.Namespace }}
  name: "{{ .Chart.Name }}-crd-cleanup"
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
rules:
  - apiGroups: ["constraints.gatekeeper.sh"]
    resources: ["*"]
    verbs: ["delete","list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "{{ .Chart.Name }}-crd-cleanup"
  namespace:  {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
subjects:
  - kind: ServiceAccount
    name: "{{ .Chart.Name }}-crd-cleanup"
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: "{{ .Chart.Name }}-crd-cleanup"
  apiGroup: rbac.authorization.k8s.io
{{- end }}